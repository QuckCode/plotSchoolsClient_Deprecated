
import { Card, Divider, Row, Typography, Button,Checkbox, Menu, Dropdown, Form , Select, List, Col, Modal} from 'antd';
import styled from 'styled-components';
import { theme } from '../../components/styles/GlobalStyles';
import {
  Printer,
  Download,
  Mail,
  Phone, MapPin
} from 'react-feather';
import {connect} from 'react-redux'
import {useEffect} from 'react'
import { getAllSubjects } from '../../redux/actions/subject';
import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import { wrapper } from '../../redux/store';
import { AuthToken } from '../../services/authToken';
import { loginSuccess } from '../../redux/actions/auth';
import { getSchoolsSetting } from '../../redux/actions/school';
import { redirectError } from '../../services/redirectService';


const FormItem = Form.Item;
const Option = Select.Option;

const Title = Typography.Title

const Content = styled.div`
  z-index: 0;
  max-width: 600px;,
  backgroundColor:'#f0f0f0'
`;


const ClassesSubjectsPage = (props) =>{

  const {schoolSettings} = props

  useEffect(() => {
      props.getAllSubject()
      return ()=>{
       
      }
  }, [])

  const savePDF =(id)=> {
    const printArea = document.getElementById(id);
    html2canvas(printArea, {useCORS:true}).then(canvas => {
      let img = new Image();
      img.src = canvas.toDataURL('image/png');
      img.onload = function () {
        let pdf = new jsPDF("portrait", 'mm', 'a4');
        console.log(img)
        pdf.addImage(img, 10, 0, 190, 200);
        pdf.save(`${id}.pdf`);
      }
    })

}

const printPDF =(id)=> {
  const printArea = document.getElementById(id);
  html2canvas(printArea, {useCORS:true}).then(canvas => {
    let img = new Image();
    img.src = canvas.toDataURL('image/png');
    img.onload = function () {
      let pdf = new jsPDF();
      pdf.addImage(img, 10, 0, 190, 200);
      window.open(pdf.output('bloburi',{ filename: `${id}.pdf` }), '_blank')
    }
  })
}
 
   const {subjects, currentClassSubjects, } = props.subjects
  return (
    <Card 
    title="Print Student  Form"
    bodyStyle={{ padding: '1rem' }}
    extra={
      <div>
        <Button onClick={()=>savePDF("formSubject")} style={{margin:10}}>
         <Download/> 
       </Button>
       <Button onClick={()=>printPDF("formSubject")}>
         <Printer/> 
       </Button>
      </div>
    }> 
        <div id="formSubject" className="p-4">
            <Row className="rowForm">
               <Col span={12}>
               <img className='banner' src={`${schoolSettings.schoolImageAsBlob}`}/>
               </Col>
               <Col span={12}>
                 <div className="description-form">
                 <span className="textForm">  <Phone/> {schoolSettings.phoneNumber}  </span>
                         <span className="textForm"> <Mail/> {schoolSettings.email} </span>
                         <span className="textForm"> <MapPin/> {schoolSettings.address} </span>
                 </div>
               </Col>
            </Row>
            <Row className=" rowForm flexRow">
             <span className="textForm labelForm" > Section:  </span>
                   <div className="line" > </div>
            </Row>
            <Row className=" rowForm flexRow">
                <span className="textForm labelForm" > Class:  </span>
                   <div className="line" > </div>
            </Row>
            <Row>
            <span className="textForm labelForm" style={{marginLeft:'30%', marginRight:'30%', fontFamily:"Roboto", fontSize:15}} > Generated by Quantum Cude For Plot Schools </span>
            <a className="textForm labelForm" href="http://www.plotSchools.com" style={{marginLeft:'35%', marginRight:'35%', fontFamily:"Roboto", fontSize:13}} > www.plotSchool.com </a> 
            </Row>
        </div>
   </Card>
       
  )
};





const mapStateToProps = state => ({
  subjects:state.subject
});

const mapDispatchToProps = {
  getAllSubject:getAllSubjects,
};


export const getServerSideProps = wrapper.getServerSideProps(
  async (ctx ) => {
    try {
      const store = ctx.store
      let data =  await AuthToken.fromNext(ctx)
      await store.dispatch(loginSuccess(data.decodedToken, data.decodedToken.userType))
      await store.dispatch(getSchoolsSetting(data.decodedToken.school))
      let propStore =  await store.getState()  
      return { props:{  
                schoolSettings: propStore.schools.settings ,

         }   } 
    } catch (error) {
        redirectError(ctx)
    }
  }
)


export default connect(mapStateToProps, mapDispatchToProps)(ClassesSubjectsPage)
